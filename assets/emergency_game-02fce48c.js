import{_ as z,N as q,F,C as A,u as U,r as D,o as f,c as g,b as R,f as n,w as k,h as y,i as T,g as E,t as b,j as p,v,a as B,k as S,n as _,l as x,p as V,e as N,d as j}from"./CookieBanner-2038b5ab.js";import{O as L}from"./bootstrap.esm-cf3ad9f6.js";const I={components:{Navbar:q,Footer:F,CookieBanner:A},name:"EmergencySimulation",data(){return{isRunning:!1,animationFrameId:null,lastUpdateTime:null,settings:{population:100,entitySpeed:100,meanTimeInfection:10,infectionRate:25,severeInfectionRate:10,progressionTime:20,treatmentTime:10,numDoctors:3},patients:[],doctors:[],deadPatients:[],natureAreaSize:{width:0,height:0},entitySize:20,draggedItem:null}},computed:{currentPopulation(){return this.patients.length},infectionRateFloat(){return this.settings.infectionRate/100},severeInfectionRateFloat(){return this.settings.severeInfectionRate/100}},mounted(){this.setupSimulationArea(),window.addEventListener("resize",this.setupSimulationArea),this.resetSimulation()},beforeUnmount(){this.stopSimulation(),window.removeEventListener("resize",this.setupSimulationArea)},methods:{setupSimulationArea(){const e=this.$refs.natureArea;e&&(this.natureAreaSize={width:e.clientWidth,height:e.clientHeight-this.entitySize-40})},resetSimulation(){this.stopSimulation(),this.patients=[],this.doctors=[],this.deadPatients=[],this.initPatients(),this.initDoctors()},initPatients(){for(let e=0;e<this.settings.population;e++)this.patients.push({id:e,group:"healthy",health:1,tolerance:0,disease_threshold:-1,x:Math.random()*(this.$refs.simulationBoundary.clientWidth-this.entitySize),y:Math.random()*(this.$refs.simulationBoundary.clientHeight-this.entitySize),vx:(Math.random()-.5)*this.settings.entitySpeed*(1-.1*Math.random()),vy:(Math.random()-.5)*this.settings.entitySpeed*(1-.1*Math.random()),color:this.getPatientColor(1),state:"nature",erRoom:null,sickTimestamp:null,durationSickToThreshold:null,durationThresholdToHealthy:null,treatmentStartTime:null,treatmentDuration:null,treatmentStartHealth:null,isDragging:!1,showTooltip:!1})},initDoctors(){for(let e=0;e<this.settings.numDoctors;e++)this.doctors.push({id:e,state:"staffRoom",erRoom:null,patientId:null,isDragging:!1})},startSimulation(){this.isRunning||(this.isRunning=!0,this.lastUpdateTime=performance.now(),this.animationFrameId=requestAnimationFrame(this.updateSimulation))},stopSimulation(){this.isRunning&&(this.isRunning=!1,cancelAnimationFrame(this.animationFrameId))},applySettingsAndRestart(){this.settings.population=Math.max(10,Math.min(500,this.settings.population)),this.settings.meanTimeInfection=Math.max(1,this.settings.meanTimeInfection),this.settings.infectionRate=Math.max(0,Math.min(100,this.settings.infectionRate)),this.settings.severeInfectionRate=Math.max(0,Math.min(100,this.settings.severeInfectionRate)),this.settings.progressionTime=Math.max(1,this.settings.progressionTime),this.settings.treatmentTime=Math.max(1,this.settings.treatmentTime),this.settings.numDoctors=Math.max(1,Math.min(10,this.settings.numDoctors)),this.resetSimulation();const e=document.getElementById("settingsOffcanvas");if(e){const i=L.getInstance(e);i&&i.hide()}},getExponentialRandom(e){let i=0;for(;i===0;)i=Math.random();return Math.max(2,-e*Math.log(i))},updateSimulation(e){if(!this.isRunning)return;const i=(e-this.lastUpdateTime)/1e3;this.lastUpdateTime=e;const m=this.patients.filter(t=>t.state==="nature");m.forEach(t=>{const o=Math.max(.5,t.health),l=this.settings.entitySpeed*o;t.x+=t.vx*i*(l/this.settings.entitySpeed),t.y+=t.vy*i*(l/this.settings.entitySpeed);const r=-.8;t.x<=0?(t.vx*=r,t.x=0):t.x>=this.$refs.simulationBoundary.clientWidth-this.entitySize&&(t.vx*=r,t.x=this.$refs.simulationBoundary.clientWidth-this.entitySize),t.y<=0?(t.vy*=r,t.y=0):t.y>=this.$refs.simulationBoundary.clientHeight-this.entitySize&&(t.vy*=r,t.y=this.$refs.simulationBoundary.clientHeight-this.entitySize)});for(let t=0;t<m.length;t++)for(let o=t+1;o<m.length;o++){const l=m[t],r=m[o],s=r.x-l.x,d=r.y-l.y,h=Math.sqrt(s*s+d*d);if(h<this.entitySize){const M=this.entitySize-h,w=M/2*(s/h),P=M/2*(d/h);l.x-=w,l.y-=P,r.x+=w,r.y+=P,[l.vx,r.vx]=[r.vx,l.vx],[l.vy,r.vy]=[r.vy,l.vy],l.vx+=(Math.random()-.5)*this.settings.entitySpeed*.1,l.vy+=(Math.random()-.5)*this.settings.entitySpeed*.1,r.vx+=(Math.random()-.5)*this.settings.entitySpeed*.1,r.vy+=(Math.random()-.5)*this.settings.entitySpeed*.1,l.group==="sick"&&r.group==="healthy"?Math.random()<this.infectionRateFloat&&this.makePatientSick(r):r.group==="sick"&&l.group==="healthy"&&Math.random()<this.infectionRateFloat&&this.makePatientSick(l)}}const u=1-Math.exp(-i/this.settings.meanTimeInfection);if(Math.random()<u){const t=m.filter(o=>o.group==="healthy");if(t.length>0){const o=Math.floor(Math.random()*t.length);this.makePatientSick(t[o])}}const a=this.patients.sort((t,o)=>t.health-o.health);a.filter(t=>t.state==="waiting").forEach(t=>{const o=Array.from({length:10},(l,r)=>r+1).find(l=>!this.patients.some(r=>r.state==="er"&&r.erRoom===l));o&&this.tryMovingPatientToErRoom(t,o)}),a.forEach(t=>{const o=t.state==="er"&&this.doctors.some(l=>l.patientId===t.id);if(t.group==="sick"&&!o&&t.sickTimestamp!==null){const l=(e-t.sickTimestamp)/1e3;if(l>t.durationSickToThreshold&&t.disease_threshold>0){const r=l-t.durationSickToThreshold;if(r<t.durationThresholdToHealthy){const s=r/t.durationThresholdToHealthy;t.health=t.disease_threshold+s*(1-t.disease_threshold)}else t.health=1,t.group="healthy",t.sickTimestamp=null,t.durationSickToThreshold=null,t.durationThresholdToHealthy=null,t.color=this.getPatientColor(1),(t.state==="waiting"||t.state==="er")&&this.movePatientToNature(t)}else{const r=l/t.durationSickToThreshold;t.health=1-r*(1-t.disease_threshold)}t.health=Math.max(0,Math.min(1,t.health)),t.color=this.getPatientColor(t.health),t.health<=0?this.handlePatientDeath(t):t.state==="nature"&&t.group==="sick"&&t.health<=t.tolerance&&this.movePatientToWaiting(t)}}),a.filter(t=>t.state==="er").forEach(t=>{const o=this.doctors.find(r=>r.state==="er"&&r.erRoom===t.erRoom),l=this.doctors.find(r=>r.state==="staffRoom");if(o){t.treatmentStartTime===null&&(t.treatmentStartTime=e,t.treatmentStartHealth=t.health,t.treatmentDuration=this.getExponentialRandom(this.settings.treatmentTime),t.sickTimestamp=null,t.durationSickToThreshold=null,t.durationThresholdToHealthy=null);const r=(e-t.treatmentStartTime)/1e3;if(r<t.treatmentDuration){const s=r/t.treatmentDuration;t.health=t.treatmentStartHealth+s*(1-t.treatmentStartHealth)}else t.health=1,t.group="healthy",t.sickTimestamp=null,t.durationSickToThreshold=null,t.durationThresholdToHealthy=null,t.treatmentStartTime=null,t.treatmentDuration=null,t.treatmentStartHealth=null,t.color=this.getPatientColor(1),this.movePatientToNature(t),o.state="staffRoom",o.erRoom=null,o.patientId=null;t.health=Math.max(0,Math.min(1,t.health)),t.color=this.getPatientColor(t.health),t.health<=0&&this.handlePatientDeath(t)}else l&&(l.state="er",l.erRoom=t.erRoom,l.patientId=t.id)}),this.animationFrameId=requestAnimationFrame(this.updateSimulation)},makePatientSick(e){e.group==="healthy"&&(e.group="sick",e.health=1,e.tolerance=.75*Math.random(),Math.random()<this.severeInfectionRateFloat?e.disease_threshold=0:e.disease_threshold=Math.random(),e.sickTimestamp=performance.now(),e.durationSickToThreshold=this.getExponentialRandom(this.settings.progressionTime),e.durationThresholdToHealthy=this.getExponentialRandom(this.settings.progressionTime),e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null,e.showTooltip===void 0&&(e.showTooltip=!1),e.color=this.getPatientColor(e.health))},handlePatientDeath(e){e.health=0,e.color=this.getPatientColor(0);const i=this.patients.findIndex(m=>m.id===e.id);if(i!==-1){const m=this.doctors.find(a=>a.patientId===e.id);m&&(m.state="staffRoom",m.erRoom=null,m.patientId=null);const u=this.patients.splice(i,1)[0];u.state="dead",u.erRoom=null,u.patientId=null,u.isDragging=!1,u.sickTimestamp=null,u.durationSickToThreshold=null,u.durationThresholdToHealthy=null,u.treatmentStartTime=null,u.treatmentDuration=null,u.treatmentStartHealth=null,u.showTooltip=!1,this.deadPatients.push(u)}},movePatientToWaiting(e){if(e.state==="nature"&&e.group==="sick"&&e.health<=e.tolerance||e.state==="er"){if(e.state==="er"){const m=this.doctors.find(u=>u.patientId===e.id);m&&(m.state="staffRoom",m.erRoom=null,m.patientId=null),e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null,e.group==="sick"&&e.sickTimestamp===null?e.sickTimestamp=performance.now():e.group==="sick"&&e.sickTimestamp}e.state="waiting",e.erRoom=null}else console.log("Cannot drop this patient into waiting from their current state or health.")},movePatientToNature(e){if(e.group!=="healthy"){console.log("Only healthy patients can return to nature.");return}e.state!=="nature"&&(e.state="nature",e.erRoom=null,e.x=Math.random()*(this.natureAreaSize.width-this.entitySize),e.y=Math.random()*(this.natureAreaSize.height-this.entitySize),e.vx=(Math.random()-.5)*this.settings.entitySpeed,e.vy=(Math.random()-.5)*this.settings.entitySpeed,e.sickTimestamp=null,e.durationSickToThreshold=null,e.durationThresholdToHealthy=null,e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null)},tryMovingPatientToErRoom(e,i){const m=this.patients.filter(a=>a.state==="er"&&a.erRoom===i),u=this.doctors.find(a=>a.state==="er"&&a.erRoom===i);if(m.length===0){if(e.state==="er"){const a=this.doctors.find(t=>t.patientId===e.id);a&&(a.state="staffRoom",a.erRoom=null,a.patientId=null),e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null}else e.state==="waiting"&&(e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null,e.group==="sick"&&e.sickTimestamp===null&&this.makePatientSick(e));e.state="er",e.erRoom=i,u&&e.group==="sick"?(e.treatmentStartTime=performance.now(),e.treatmentStartHealth=e.health,e.treatmentDuration=this.getExponentialRandom(this.settings.treatmentTime),e.sickTimestamp=null,e.durationSickToThreshold=null,e.durationThresholdToHealthy=null,u.patientId=e.id):(e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null)}else console.log(`ER Room ${i} is already occupied by a patient.`)},getPatientColor(e){const i=Math.max(0,Math.min(1,e));return i>=.6?`hsl(${60+(i-.6)/.4*60}, 100%, 50%)`:i>.3?`hsl(${(i-.3)/.3*60}, 100%, 50%)`:i>0?`hsl(0, 100%, ${i/.3*50}%)`:"black"},handleDragStart(e,i,m){if(!this.isRunning){e.preventDefault();return}if(this.draggedItem={id:i,type:m},e.dataTransfer.setData("text/plain",`${m}:${i}`),e.dataTransfer.effectAllowed="move",m==="patient"){const u=this.patients.find(a=>a.id===i);u&&(u.isDragging=!0),u&&(u.showTooltip=!1)}else{const u=this.doctors.find(a=>a.id===i);u&&(u.isDragging=!0)}},handleDragEnd(e,i,m){if(m==="patient"){const u=this.patients.find(a=>a.id===i);u&&(u.isDragging=!1)}else{const u=this.doctors.find(a=>a.id===i);u&&(u.isDragging=!1)}this.draggedItem=null},handleDrop(e,i,m=null){if(e.preventDefault(),!this.isRunning)return;const u=e.dataTransfer.getData("text/plain").split(":");if(u.length!==2)return;const a=u[0],t=parseInt(u[1],10);if(a==="patient"){const o=this.patients.find(l=>l.id===t);o&&(o.isDragging=!1)}else{const o=this.doctors.find(l=>l.id===t);o&&(o.isDragging=!1)}if(a==="patient"){const o=this.patients.find(l=>l.id===t);if(!o||o.state==="dead")return;switch(i){case"waiting":if(o.state==="er"||o.state==="nature"&&o.group==="sick"&&o.health<=o.tolerance){if(o.state==="er"){const l=this.doctors.find(r=>r.patientId===o.id);l&&(l.state="staffRoom",l.erRoom=null,l.patientId=null),o.treatmentStartTime=null,o.treatmentDuration=null,o.treatmentStartHealth=null,o.group==="sick"&&o.sickTimestamp===null&&this.makePatientSick(o)}o.state="waiting",o.erRoom=null}else console.log("Cannot drop a healthy patient or a sick patient above tolerance into waiting.");break;case"er":this.tryMovingPatientToErRoom(o,m);break}}else if(a==="doctor"){const o=this.doctors.find(l=>l.id===t);if(!o)return;switch(i){case"staff":if(o.state==="er"){const s=this.patients.find(d=>d.id===o.patientId);s&&(s.treatmentStartTime=null,s.treatmentDuration=null,s.treatmentStartHealth=null,s.group==="sick"&&s.sickTimestamp===null&&this.makePatientSick(s)),o.state="staffRoom",o.erRoom=null,o.patientId=null}break;case"er":const l=this.doctors.find(s=>s.state==="er"&&s.erRoom===m),r=this.patients.find(s=>s.state==="er"&&s.erRoom===m);if(l)console.log(`ER Room ${m} is already occupied by a doctor.`);else{if(o.state==="er"){const s=this.patients.find(d=>d.id===o.patientId);s&&(s.treatmentStartTime=null,s.treatmentDuration=null,s.treatmentStartHealth=null,s.group==="sick"&&s.sickTimestamp===null&&this.makePatientSick(s))}o.state="er",o.erRoom=m,o.patientId=null,r&&r.group==="sick"&&(r.treatmentStartTime=performance.now(),r.treatmentStartHealth=r.health,r.treatmentDuration=this.getExponentialRandom(this.settings.treatmentTime),r.sickTimestamp=null,r.durationSickToThreshold=null,r.durationThresholdToHealthy=null,o.patientId=r.id)}break}}this.draggedItem=null,this.patients.forEach(o=>o.isDragging=!1),this.doctors.forEach(o=>o.isDragging=!1)}}},H=()=>{U(e=>({"23d60b38":e.entitySize+"px"}))},C=I.setup;I.setup=C?(e,i)=>(H(),C(e,i)):H;const c=e=>(V("data-v-f55a24a3"),e=e(),N(),e),O={class:"root-container no-select d-flex flex-column min-vh-100"},W={class:"container simulation-container flex-grow-1"},G=c(()=>n("div",{class:"row mt-3 mb-3"},[n("h2",{class:"text-center"},"Simulation d'infection")],-1)),X={class:"row"},Y={class:"simulation-boundary",ref:"simulationBoundary"},J=["onMouseenter","onMouseleave"],K={class:"col-md-4 hospital-area",ref:"hospitalArea"},Q={class:"hospital-layout"},Z=c(()=>n("div",{class:"text-center align-self-center"},[n("h4",{class:"mt-2 mb-4"},"Urgence")],-1)),$=c(()=>n("h5",null,"Salle du personnel",-1)),tt=["onDragstart","onDragend"],et={class:"emergency-rooms-grid"},st=["onDrop"],it={class:"er-occupants"},nt=["onDragstart","onDragend","onMouseenter","onMouseleave"],ot=["onDragstart","onDragend"],at=c(()=>n("h5",null,"Salle d'attente",-1)),rt=["onDragstart","onDragend","onMouseenter","onMouseleave"],lt={class:"row simulation-controls mt-3 bg-dark"},dt={class:"col-6 text-center align-self-center"},ut={class:"mt-1 mb-1"},mt=c(()=>n("i",{class:"bi bi-emoji-smile"},null,-1)),ct={class:"col-6 text-center align-self-center"},ht={class:"mt-1 mb-1"},ft=c(()=>n("i",{class:"bi bi-emoji-dizzy"},null,-1)),gt={class:"row simulation-controls mt-3 mb-3 bg-dark"},pt={class:"col-12 text-center align-self-center"},vt=["disabled"],yt=c(()=>n("i",{class:"bi bi-play-fill",style:{"font-size":"25px"}},null,-1)),Tt=[yt],bt=c(()=>n("i",{class:"bi bi-arrow-counterclockwise",style:{"font-size":"25px"}},null,-1)),St=[bt],_t=c(()=>n("button",{class:"btn btn-warning ms-3 me-3 mt-1 mb-1",type:"button","data-bs-toggle":"offcanvas","data-bs-target":"#settingsOffcanvas","aria-controls":"settingsOffcanvas",title:"Paramètres de la simulation"},[n("i",{class:"bi bi-gear",style:{"font-size":"25px"}})],-1)),kt={class:"offcanvas offcanvas-end",style:{width:"420px"},tabindex:"-1",id:"settingsOffcanvas","data-bs-backdrop":"static","aria-labelledby":"settingsOffcanvasLabel"},Dt=c(()=>n("div",{class:"offcanvas-header"},[n("h5",{class:"offcanvas-title",id:"settingsOffcanvasLabel",style:{color:"black"}},"Paramètres"),n("button",{type:"button",class:"btn-close text-reset","data-bs-dismiss":"offcanvas","aria-label":"Close",style:{"background-color":"transparent"}})],-1)),Rt={class:"offcanvas-body"},xt={class:"mb-3"},It=c(()=>n("label",{for:"population",class:"form-label"},"Population initiale",-1)),Mt={class:"mb-3"},wt=c(()=>n("label",{for:"population",class:"form-label"},"Vitesse de déplacement",-1)),Pt={class:"mb-3"},Et=c(()=>n("label",{for:"meanTimeInfection",class:"form-label",title:"Une infection spontannée pourrait représenter une personne infectée venue de l'étranger"},"Temps moyen avant infection spontanée (s)",-1)),Ht={class:"mb-3"},Ct=c(()=>n("label",{for:"infectionRate",class:"form-label",title:"Probabilité qu'un individu soit infecté si elle entre en contact avec un individu infecté"},"Taux d'infection par contact (%)",-1)),zt={class:"mb-3"},qt=c(()=>n("label",{for:"severeInfectionRate",class:"form-label",title:"Probabilité qu'un individu infecté décède si il n'est pas traité par un médecin à l'urgence"},"Taux de mortalité si non traité (%)",-1)),Ft={class:"mb-3"},At=c(()=>n("label",{for:"progressionTime",class:"form-label",title:"Temps moyen de progression ou de rémission naturelle de la maladie"},"Temps moyen de progression/rémission (s)",-1)),Ut={class:"mb-3"},Bt=c(()=>n("label",{for:"treatmentTime",class:"form-label",title:"Temps moyen de traitement de la maladie à l'urgence"},"Temps moyen de traitement à l'urgence (s)",-1)),Vt={class:"mb-3"},Nt=c(()=>n("label",{for:"numDoctors",class:"form-label"},"Nombre de médecins",-1)),jt=B('<div class="row mt-5" data-v-f55a24a3><div class="col-12 d-flex justify-content-center" data-v-f55a24a3><h1 data-v-f55a24a3>À propos</h1></div></div><div class="row mt-3 mb-3" data-v-f55a24a3><div class="col-12" data-v-f55a24a3><p data-v-f55a24a3>Cette application simule (très hypothétiquement) l&#39;infection d&#39;une population d&#39;individus ainsi que la prise en charge à l&#39;urgence des individus infectés.</p><p data-v-f55a24a3>Une infection spontannée, réprésentant par exemple une personne infectée venue de l&#39;étranger, peut survenir à n&#39;importe quel moment avec un temps moyen (distribution exponentielle) spécifié dans les paramètres. À chaque contact entre un individu infecté et un individu sain, il y a un risque d&#39;infection selon une probabilité spécifiée dans les paramètres. Lors d&#39;une infection, celle-ci entraînera la mort de l&#39;individu, s&#39;il n&#39;est pas traité, selon une probabilité également spécifiée dans les paramètres.</p><p data-v-f55a24a3>La santé de l&#39;individu infecté diminue jusqu&#39;à 0 % si l&#39;infection est mortelle ou entre 0 et 100 % (distribution uniforme) autrement. Une fois que la santé de l&#39;individu atteint ce seuil, à moins que ce dernier soit nul, elle remontera jusqu&#39;à 100 %. Le temps moyen de progression/rémission (distribution exponentielle) est spécifié dans les paramètres. À noter que ces deux temps sont différents pour un même individu. Si un individu meurt, il sera simplement éliminé de la simulation.</p><p data-v-f55a24a3>En diminuant, si la santé de l&#39;individu atteint un seuil de tolérance entre 25 et 100 % (distribution uniforme), celui-ci se rendra à l&#39;urgence. Ce paramètre simule en fait le degré de tolérance d&#39;un individu avant qu&#39;il décide de se rendre à l&#39;urgence.</p><p data-v-f55a24a3>Si une salle de traitement est disponible à l&#39;urgence, l&#39;individu sera automatiquement assigné à celle-ci. Si un médecin est disponible, il sera également assigné à cette salle. Si les salles sont pleines, l&#39;individu attendra en salle d&#39;attente.</p><p data-v-f55a24a3>Les individus sont placés en ordre de priorité dans la salle d&#39;attente. Cependant, un médecin ne changera pas de salle tant que le traitement d&#39;un individu ne sera pas terminé selon le temps de traitement moyen spécifié (distribution exponentielle). Tous les traitements rétablissent la santé des individus. Une individu dont l&#39;infection est mortelle, s&#39;il est traité à temps sera nécessairement guéri.</p><p data-v-f55a24a3>Il est possible qu&#39;un individu guérisse par lui même pendant qu&#39;il est à l&#39;urgence. Un individu guéri retournera automatiquement dans la population.</p><p data-v-f55a24a3>La population de départ, le nombre de médecins disponibles ainsi que la vitesse de déplacement des individus peuvent être modifiés dans les paramètres.</p><p data-v-f55a24a3>Il est également possible de déplacer manuellement les individus ainsi que les médecins dans l&#39;urgence pour tenter de prioriser les traitements.</p><p data-v-f55a24a3>Cette application a été réalisée grâce à l&#39;<b data-v-f55a24a3>intelligence artificielle</b> (à environ 90 %) à partir d&#39;une requête détaillée à <a href="https://deepmind.google/technologies/gemini/" target="_blank" data-v-f55a24a3>Gemini 2.5 Pro</a> de Google.</p></div></div>',2);function Lt(e,i,m,u,a,t){const o=D("Navbar"),l=D("Footer"),r=D("cookieBanner");return f(),g("div",O,[R(o),n("div",W,[G,n("div",X,[n("div",{class:"col-md-8 p-0 simulation-area nature-area",ref:"natureArea",onDragover:i[0]||(i[0]=k(()=>{},["prevent"])),onDrop:i[1]||(i[1]=s=>t.handleDrop(s,"nature"))},[n("div",Y,[(f(!0),g(y,null,T(a.patients.filter(s=>s.state==="nature"),s=>(f(),g("div",{key:"nature-p-"+s.id,class:S(["entity patient patient-nature",{"is-sick":s.group==="sick","is-dragging":s.isDragging}]),style:_({left:s.x+"px",top:s.y+"px",backgroundColor:s.color,pointerEvents:a.isRunning?"auto":"none"}),draggable:"true",onMouseenter:d=>s.showTooltip=!0,onMouseleave:d=>s.showTooltip=!1},[p(n("div",{class:"patient-tooltip"}," Santé: "+b((s.health*100).toFixed(0))+" % ",513),[[x,s.showTooltip]])],46,J))),128))],512)],544),n("div",K,[n("div",Q,[Z,n("div",{class:"room staff-room p-2",onDragover:i[2]||(i[2]=k(()=>{},["prevent"])),onDrop:i[3]||(i[3]=s=>t.handleDrop(s,"staff"))},[$,(f(!0),g(y,null,T(a.doctors.filter(s=>s.state==="staffRoom"),s=>(f(),g("div",{key:"s-"+s.id,class:S(["entity doctor doctor-staff",{"is-dragging":s.isDragging}]),style:_({pointerEvents:a.isRunning?"auto":"none"}),draggable:"true",onDragstart:d=>t.handleDragStart(d,s.id,"doctor"),onDragend:d=>t.handleDragEnd(d,s.id,"doctor")},null,46,tt))),128))],32),n("div",et,[(f(),g(y,null,T(10,s=>n("div",{key:"er-"+s,class:"room emergency-room p-1",onDragover:i[4]||(i[4]=k(()=>{},["prevent"])),onDrop:d=>t.handleDrop(d,"er",s)},[n("h6",null,"Salle "+b(s),1),n("div",it,[(f(!0),g(y,null,T(a.patients.filter(d=>d.state==="er"&&d.erRoom===s),d=>(f(),g("div",{key:"er-p-"+d.id,class:S(["entity patient patient-er",{"is-sick":d.group==="sick","is-dragging":d.isDragging}]),style:_({backgroundColor:d.color,pointerEvents:a.isRunning?"auto":"none"}),draggable:"true",onDragstart:h=>t.handleDragStart(h,d.id,"patient"),onDragend:h=>t.handleDragEnd(h,d.id,"patient"),onMouseenter:h=>d.showTooltip=!0,onMouseleave:h=>d.showTooltip=!1},[p(n("div",{class:"patient-tooltip"}," Santé: "+b((d.health*100).toFixed(0))+" % ",513),[[x,d.showTooltip]])],46,nt))),128)),(f(!0),g(y,null,T(a.doctors.filter(d=>d.state==="er"&&d.erRoom===s),d=>(f(),g("div",{key:"er-d-"+d.id,class:S(["entity doctor doctor-er",{"is-dragging":d.isDragging}]),style:_({pointerEvents:a.isRunning?"auto":"none"}),draggable:"true",onDragstart:h=>t.handleDragStart(h,d.id,"doctor"),onDragend:h=>t.handleDragEnd(h,d.id,"doctor")},null,46,ot))),128))])],40,st)),64))]),n("div",{class:"room waiting-room p-2",onDragover:i[5]||(i[5]=k(()=>{},["prevent"])),onDrop:i[6]||(i[6]=s=>t.handleDrop(s,"waiting"))},[at,(f(!0),g(y,null,T(a.patients.filter(s=>s.state==="waiting").sort((s,d)=>s.health-d.health),s=>(f(),g("div",{key:"w-"+s.id,class:S(["entity patient patient-waiting",{"is-sick":s.group==="sick","is-dragging":s.isDragging}]),style:_({backgroundColor:s.color,pointerEvents:a.isRunning?"auto":"none"}),draggable:"true",onDragstart:d=>t.handleDragStart(d,s.id,"patient"),onDragend:d=>t.handleDragEnd(d,s.id,"patient"),onMouseenter:d=>s.showTooltip=!0,onMouseleave:d=>s.showTooltip=!1},[p(n("div",{class:"patient-tooltip"}," Santé: "+b((s.health*100).toFixed(0))+" % ",513),[[x,s.showTooltip]])],46,rt))),128))],32),n("div",lt,[n("div",dt,[n("h4",ut,[mt,E(" "+b(t.currentPopulation),1)])]),n("div",ct,[n("h4",ht,[ft,E(" "+b(a.deadPatients.length),1)])])]),n("div",gt,[n("div",pt,[n("button",{class:"btn btn-success ms-3 me-3 mt-1 mb-1",onClick:i[7]||(i[7]=(...s)=>t.startSimulation&&t.startSimulation(...s)),disabled:a.isRunning,title:"Démarrer la simulation"},Tt,8,vt),n("button",{class:"btn btn-secondary ms-3 me-3 mt-1 mb-1",onClick:i[8]||(i[8]=(...s)=>t.resetSimulation&&t.resetSimulation(...s)),title:"Réinitialiser la simulation"},St),_t])])])],512)]),n("div",kt,[Dt,n("div",Rt,[n("div",xt,[It,p(n("input",{type:"number",class:"form-control",id:"population","onUpdate:modelValue":i[9]||(i[9]=s=>a.settings.population=s),min:"10",max:"300",step:"10"},null,512),[[v,a.settings.population,void 0,{number:!0}]])]),n("div",Mt,[wt,p(n("input",{type:"number",class:"form-control",id:"population","onUpdate:modelValue":i[10]||(i[10]=s=>a.settings.entitySpeed=s),min:"10",max:"300",step:"50"},null,512),[[v,a.settings.entitySpeed,void 0,{number:!0}]])]),n("div",Pt,[Et,p(n("input",{type:"number",class:"form-control",id:"meanTimeInfection","onUpdate:modelValue":i[11]||(i[11]=s=>a.settings.meanTimeInfection=s),min:"1",step:"1"},null,512),[[v,a.settings.meanTimeInfection,void 0,{number:!0}]])]),n("div",Ht,[Ct,p(n("input",{type:"number",class:"form-control",id:"infectionRate","onUpdate:modelValue":i[12]||(i[12]=s=>a.settings.infectionRate=s),min:"0",max:"100",step:"1"},null,512),[[v,a.settings.infectionRate,void 0,{number:!0}]])]),n("div",zt,[qt,p(n("input",{type:"number",class:"form-control",id:"severeInfectionRate","onUpdate:modelValue":i[13]||(i[13]=s=>a.settings.severeInfectionRate=s),min:"0",max:"100",step:"1"},null,512),[[v,a.settings.severeInfectionRate,void 0,{number:!0}]])]),n("div",Ft,[At,p(n("input",{type:"number",class:"form-control",id:"progressionTime","onUpdate:modelValue":i[14]||(i[14]=s=>a.settings.progressionTime=s),min:"1",step:"1"},null,512),[[v,a.settings.progressionTime,void 0,{number:!0}]])]),n("div",Ut,[Bt,p(n("input",{type:"number",class:"form-control",id:"treatmentTime","onUpdate:modelValue":i[15]||(i[15]=s=>a.settings.treatmentTime=s),min:"1",step:"1"},null,512),[[v,a.settings.treatmentTime,void 0,{number:!0}]])]),n("div",Vt,[Nt,p(n("input",{type:"number",class:"form-control",id:"numDoctors","onUpdate:modelValue":i[16]||(i[16]=s=>a.settings.numDoctors=s),min:"1",max:"10"},null,512),[[v,a.settings.numDoctors,void 0,{number:!0}]])]),n("button",{class:"btn w-100 mt-3",style:{"font-size":"20px","background-color":"darkorange",color:"white"},onClick:i[17]||(i[17]=(...s)=>t.applySettingsAndRestart&&t.applySettingsAndRestart(...s)),"data-bs-dismiss":"offcanvas","aria-label":"Close"},"Ok")])]),jt]),R(l),R(r)])}const Ot=z(I,[["render",Lt],["__scopeId","data-v-f55a24a3"]]);j(Ot).mount("#app");
