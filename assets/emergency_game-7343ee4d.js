import{_ as C,N as q,F as z,C as F,u as A,r as D,o as f,c as g,b as R,f as o,w as k,h as b,i as y,t as T,j as p,v,a as U,k as S,n as _,l as x,p as O,e as B,d as V}from"./CookieBanner-2038b5ab.js";import{O as L}from"./bootstrap.esm-cf3ad9f6.js";const I={components:{Navbar:q,Footer:z,CookieBanner:F},name:"EmergencySimulation",data(){return{isRunning:!1,animationFrameId:null,lastUpdateTime:null,settings:{population:100,entitySpeed:100,meanTimeInfection:10,infectionRate:25,severeInfectionRate:10,progressionTime:20,treatmentTime:10,numDoctors:3},patients:[],doctors:[],deadPatients:[],natureAreaSize:{width:0,height:0},entitySize:20,draggedItem:null}},computed:{currentPopulation(){return this.patients.length},infectionRateFloat(){return this.settings.infectionRate/100},severeInfectionRateFloat(){return this.settings.severeInfectionRate/100}},mounted(){this.setupSimulationArea(),window.addEventListener("resize",this.setupSimulationArea),this.resetSimulation()},beforeUnmount(){this.stopSimulation(),window.removeEventListener("resize",this.setupSimulationArea)},methods:{setupSimulationArea(){const e=this.$refs.natureArea;e&&(this.natureAreaSize={width:e.clientWidth,height:e.clientHeight-this.entitySize-40})},resetSimulation(){this.stopSimulation(),this.patients=[],this.doctors=[],this.deadPatients=[],this.initPatients(),this.initDoctors()},initPatients(){for(let e=0;e<this.settings.population;e++)this.patients.push({id:e,group:"healthy",health:1,tolerance:0,disease_threshold:-1,x:Math.random()*(this.$refs.simulationBoundary.clientWidth-this.entitySize),y:Math.random()*(this.$refs.simulationBoundary.clientHeight-this.entitySize),vx:(Math.random()-.5)*this.settings.entitySpeed*(1-.1*Math.random()),vy:(Math.random()-.5)*this.settings.entitySpeed*(1-.1*Math.random()),color:this.getPatientColor(1),state:"nature",erRoom:null,sickTimestamp:null,durationSickToThreshold:null,durationThresholdToHealthy:null,treatmentStartTime:null,treatmentDuration:null,treatmentStartHealth:null,isDragging:!1,showTooltip:!1})},initDoctors(){for(let e=0;e<this.settings.numDoctors;e++)this.doctors.push({id:e,state:"staffRoom",erRoom:null,patientId:null,isDragging:!1})},startSimulation(){this.isRunning||(this.isRunning=!0,this.lastUpdateTime=performance.now(),this.animationFrameId=requestAnimationFrame(this.updateSimulation))},stopSimulation(){this.isRunning&&(this.isRunning=!1,cancelAnimationFrame(this.animationFrameId))},applySettingsAndRestart(){this.settings.population=Math.max(10,Math.min(500,this.settings.population)),this.settings.meanTimeInfection=Math.max(1,this.settings.meanTimeInfection),this.settings.infectionRate=Math.max(0,Math.min(100,this.settings.infectionRate)),this.settings.severeInfectionRate=Math.max(0,Math.min(100,this.settings.severeInfectionRate)),this.settings.progressionTime=Math.max(1,this.settings.progressionTime),this.settings.treatmentTime=Math.max(1,this.settings.treatmentTime),this.settings.numDoctors=Math.max(1,Math.min(10,this.settings.numDoctors)),this.resetSimulation();const e=document.getElementById("settingsOffcanvas");if(e){const n=L.getInstance(e);n&&n.hide()}},getExponentialRandom(e){let n=0;for(;n===0;)n=Math.random();return Math.max(2,-e*Math.log(n))},updateSimulation(e){if(!this.isRunning)return;const n=(e-this.lastUpdateTime)/1e3;this.lastUpdateTime=e;const m=this.patients.filter(t=>t.state==="nature");m.forEach(t=>{const i=Math.max(.5,t.health),l=this.settings.entitySpeed*i;t.x+=t.vx*n*(l/this.settings.entitySpeed),t.y+=t.vy*n*(l/this.settings.entitySpeed);const r=-.8;t.x<=0?(t.vx*=r,t.x=0):t.x>=this.$refs.simulationBoundary.clientWidth-this.entitySize&&(t.vx*=r,t.x=this.$refs.simulationBoundary.clientWidth-this.entitySize),t.y<=0?(t.vy*=r,t.y=0):t.y>=this.$refs.simulationBoundary.clientHeight-this.entitySize&&(t.vy*=r,t.y=this.$refs.simulationBoundary.clientHeight-this.entitySize)});for(let t=0;t<m.length;t++)for(let i=t+1;i<m.length;i++){const l=m[t],r=m[i],s=r.x-l.x,d=r.y-l.y,h=Math.sqrt(s*s+d*d);if(h<this.entitySize){const M=this.entitySize-h,w=M/2*(s/h),P=M/2*(d/h);l.x-=w,l.y-=P,r.x+=w,r.y+=P,[l.vx,r.vx]=[r.vx,l.vx],[l.vy,r.vy]=[r.vy,l.vy],l.vx+=(Math.random()-.5)*this.settings.entitySpeed*.1,l.vy+=(Math.random()-.5)*this.settings.entitySpeed*.1,r.vx+=(Math.random()-.5)*this.settings.entitySpeed*.1,r.vy+=(Math.random()-.5)*this.settings.entitySpeed*.1,l.group==="sick"&&r.group==="healthy"?Math.random()<this.infectionRateFloat&&this.makePatientSick(r):r.group==="sick"&&l.group==="healthy"&&Math.random()<this.infectionRateFloat&&this.makePatientSick(l)}}const u=1-Math.exp(-n/this.settings.meanTimeInfection);if(Math.random()<u){const t=m.filter(i=>i.group==="healthy");if(t.length>0){const i=Math.floor(Math.random()*t.length);this.makePatientSick(t[i])}}const a=this.patients.sort((t,i)=>t.health-i.health);a.filter(t=>t.state==="waiting").forEach(t=>{const i=Array.from({length:10},(l,r)=>r+1).find(l=>!this.patients.some(r=>r.state==="er"&&r.erRoom===l));i&&this.tryMovingPatientToErRoom(t,i)}),a.forEach(t=>{const i=t.state==="er"&&this.doctors.some(l=>l.patientId===t.id);if(t.group==="sick"&&!i&&t.sickTimestamp!==null){const l=(e-t.sickTimestamp)/1e3;if(l>t.durationSickToThreshold&&t.disease_threshold>0){const r=l-t.durationSickToThreshold;if(r<t.durationThresholdToHealthy){const s=r/t.durationThresholdToHealthy;t.health=t.disease_threshold+s*(1-t.disease_threshold)}else t.health=1,t.group="healthy",t.sickTimestamp=null,t.durationSickToThreshold=null,t.durationThresholdToHealthy=null,t.color=this.getPatientColor(1),(t.state==="waiting"||t.state==="er")&&this.movePatientToNature(t)}else{const r=l/t.durationSickToThreshold;t.health=1-r*(1-t.disease_threshold)}t.health=Math.max(0,Math.min(1,t.health)),t.color=this.getPatientColor(t.health),t.health<=0?this.handlePatientDeath(t):t.state==="nature"&&t.group==="sick"&&t.health<=t.tolerance&&this.movePatientToWaiting(t)}}),a.filter(t=>t.state==="er").forEach(t=>{const i=this.doctors.find(r=>r.state==="er"&&r.erRoom===t.erRoom),l=this.doctors.find(r=>r.state==="staffRoom");if(i){t.treatmentStartTime===null&&(t.treatmentStartTime=e,t.treatmentStartHealth=t.health,t.treatmentDuration=this.getExponentialRandom(this.settings.treatmentTime),t.sickTimestamp=null,t.durationSickToThreshold=null,t.durationThresholdToHealthy=null);const r=(e-t.treatmentStartTime)/1e3;if(r<t.treatmentDuration){const s=r/t.treatmentDuration;t.health=t.treatmentStartHealth+s*(1-t.treatmentStartHealth)}else t.health=1,t.group="healthy",t.sickTimestamp=null,t.durationSickToThreshold=null,t.durationThresholdToHealthy=null,t.treatmentStartTime=null,t.treatmentDuration=null,t.treatmentStartHealth=null,t.color=this.getPatientColor(1),this.movePatientToNature(t),i.state="staffRoom",i.erRoom=null,i.patientId=null;t.health=Math.max(0,Math.min(1,t.health)),t.color=this.getPatientColor(t.health),t.health<=0&&this.handlePatientDeath(t)}else l&&(l.state="er",l.erRoom=t.erRoom,l.patientId=t.id)}),this.animationFrameId=requestAnimationFrame(this.updateSimulation)},makePatientSick(e){e.group==="healthy"&&(e.group="sick",e.health=1,e.tolerance=.75*Math.random(),Math.random()<this.severeInfectionRateFloat?e.disease_threshold=0:e.disease_threshold=Math.random(),e.sickTimestamp=performance.now(),e.durationSickToThreshold=this.getExponentialRandom(this.settings.progressionTime),e.durationThresholdToHealthy=this.getExponentialRandom(this.settings.progressionTime),e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null,e.showTooltip===void 0&&(e.showTooltip=!1),e.color=this.getPatientColor(e.health))},handlePatientDeath(e){e.health=0,e.color=this.getPatientColor(0);const n=this.patients.findIndex(m=>m.id===e.id);if(n!==-1){const m=this.doctors.find(a=>a.patientId===e.id);m&&(m.state="staffRoom",m.erRoom=null,m.patientId=null);const u=this.patients.splice(n,1)[0];u.state="dead",u.erRoom=null,u.patientId=null,u.isDragging=!1,u.sickTimestamp=null,u.durationSickToThreshold=null,u.durationThresholdToHealthy=null,u.treatmentStartTime=null,u.treatmentDuration=null,u.treatmentStartHealth=null,u.showTooltip=!1,this.deadPatients.push(u)}},movePatientToWaiting(e){if(e.state==="nature"&&e.group==="sick"&&e.health<=e.tolerance||e.state==="er"){if(e.state==="er"){const m=this.doctors.find(u=>u.patientId===e.id);m&&(m.state="staffRoom",m.erRoom=null,m.patientId=null),e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null,e.group==="sick"&&e.sickTimestamp===null?e.sickTimestamp=performance.now():e.group==="sick"&&e.sickTimestamp}e.state="waiting",e.erRoom=null}else console.log("Cannot drop this patient into waiting from their current state or health.")},movePatientToNature(e){if(e.group!=="healthy"){console.log("Only healthy patients can return to nature.");return}e.state!=="nature"&&(e.state="nature",e.erRoom=null,e.x=Math.random()*(this.natureAreaSize.width-this.entitySize),e.y=Math.random()*(this.natureAreaSize.height-this.entitySize),e.vx=(Math.random()-.5)*this.settings.entitySpeed,e.vy=(Math.random()-.5)*this.settings.entitySpeed,e.sickTimestamp=null,e.durationSickToThreshold=null,e.durationThresholdToHealthy=null,e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null)},tryMovingPatientToErRoom(e,n){const m=this.patients.filter(a=>a.state==="er"&&a.erRoom===n),u=this.doctors.find(a=>a.state==="er"&&a.erRoom===n);if(m.length===0){if(e.state==="er"){const a=this.doctors.find(t=>t.patientId===e.id);a&&(a.state="staffRoom",a.erRoom=null,a.patientId=null),e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null}else e.state==="waiting"&&(e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null,e.group==="sick"&&e.sickTimestamp===null&&this.makePatientSick(e));e.state="er",e.erRoom=n,u&&e.group==="sick"?(e.treatmentStartTime=performance.now(),e.treatmentStartHealth=e.health,e.treatmentDuration=this.getExponentialRandom(this.settings.treatmentTime),e.sickTimestamp=null,e.durationSickToThreshold=null,e.durationThresholdToHealthy=null,u.patientId=e.id):(e.treatmentStartTime=null,e.treatmentDuration=null,e.treatmentStartHealth=null)}else console.log(`ER Room ${n} is already occupied by a patient.`)},getPatientColor(e){const n=Math.max(0,Math.min(1,e));return n>=.6?`hsl(${60+(n-.6)/.4*60}, 100%, 50%)`:n>.3?`hsl(${(n-.3)/.3*60}, 100%, 50%)`:n>0?`hsl(0, 100%, ${n/.3*50}%)`:"black"},handleDragStart(e,n,m){if(!this.isRunning){e.preventDefault();return}if(this.draggedItem={id:n,type:m},e.dataTransfer.setData("text/plain",`${m}:${n}`),e.dataTransfer.effectAllowed="move",m==="patient"){const u=this.patients.find(a=>a.id===n);u&&(u.isDragging=!0),u&&(u.showTooltip=!1)}else{const u=this.doctors.find(a=>a.id===n);u&&(u.isDragging=!0)}},handleDragEnd(e,n,m){if(m==="patient"){const u=this.patients.find(a=>a.id===n);u&&(u.isDragging=!1)}else{const u=this.doctors.find(a=>a.id===n);u&&(u.isDragging=!1)}this.draggedItem=null},handleDrop(e,n,m=null){if(e.preventDefault(),!this.isRunning)return;const u=e.dataTransfer.getData("text/plain").split(":");if(u.length!==2)return;const a=u[0],t=parseInt(u[1],10);if(a==="patient"){const i=this.patients.find(l=>l.id===t);i&&(i.isDragging=!1)}else{const i=this.doctors.find(l=>l.id===t);i&&(i.isDragging=!1)}if(a==="patient"){const i=this.patients.find(l=>l.id===t);if(!i||i.state==="dead")return;switch(n){case"waiting":if(i.state==="er"||i.state==="nature"&&i.group==="sick"&&i.health<=i.tolerance){if(i.state==="er"){const l=this.doctors.find(r=>r.patientId===i.id);l&&(l.state="staffRoom",l.erRoom=null,l.patientId=null),i.treatmentStartTime=null,i.treatmentDuration=null,i.treatmentStartHealth=null,i.group==="sick"&&i.sickTimestamp===null&&this.makePatientSick(i)}i.state="waiting",i.erRoom=null}else console.log("Cannot drop a healthy patient or a sick patient above tolerance into waiting.");break;case"er":this.tryMovingPatientToErRoom(i,m);break}}else if(a==="doctor"){const i=this.doctors.find(l=>l.id===t);if(!i)return;switch(n){case"staff":if(i.state==="er"){const s=this.patients.find(d=>d.id===i.patientId);s&&(s.treatmentStartTime=null,s.treatmentDuration=null,s.treatmentStartHealth=null,s.group==="sick"&&s.sickTimestamp===null&&this.makePatientSick(s)),i.state="staffRoom",i.erRoom=null,i.patientId=null}break;case"er":const l=this.doctors.find(s=>s.state==="er"&&s.erRoom===m),r=this.patients.find(s=>s.state==="er"&&s.erRoom===m);if(l)console.log(`ER Room ${m} is already occupied by a doctor.`);else{if(i.state==="er"){const s=this.patients.find(d=>d.id===i.patientId);s&&(s.treatmentStartTime=null,s.treatmentDuration=null,s.treatmentStartHealth=null,s.group==="sick"&&s.sickTimestamp===null&&this.makePatientSick(s))}i.state="er",i.erRoom=m,i.patientId=null,r&&r.group==="sick"&&(r.treatmentStartTime=performance.now(),r.treatmentStartHealth=r.health,r.treatmentDuration=this.getExponentialRandom(this.settings.treatmentTime),r.sickTimestamp=null,r.durationSickToThreshold=null,r.durationThresholdToHealthy=null,i.patientId=r.id)}break}}this.draggedItem=null,this.patients.forEach(i=>i.isDragging=!1),this.doctors.forEach(i=>i.isDragging=!1)}}},E=()=>{A(e=>({"05065218":e.entitySize+"px"}))},H=I.setup;I.setup=H?(e,n)=>(E(),H(e,n)):E;const c=e=>(O("data-v-f0d17f92"),e=e(),B(),e),N={class:"root-container no-select d-flex flex-column min-vh-100"},j={class:"container simulation-container flex-grow-1"},W=c(()=>o("div",{class:"row mt-2 mb-2E"},[o("h2",{class:"text-center"},"Simulation d'infection")],-1)),G={class:"row h-100"},X={class:"simulation-boundary mb-1",ref:"simulationBoundary"},Y=["onMouseenter","onMouseleave"],J={class:"simulation-controls mt-2 mb-3 p-0 bg-dark"},K={class:"d-flex justify-content-between align-items-center"},Q={class:"col-md-3 d-flex justify-content-start"},Z=["disabled"],$=c(()=>o("i",{class:"bi bi-play-fill"},null,-1)),tt=[$],et=c(()=>o("i",{class:"bi bi-arrow-counterclockwise"},null,-1)),st=[et],nt=c(()=>o("button",{class:"btn btn-warning me-2",type:"button","data-bs-toggle":"offcanvas","data-bs-target":"#settingsOffcanvas","aria-controls":"settingsOffcanvas",title:"Paramètres de la simulation"},[o("i",{class:"bi bi-gear"})],-1)),it=c(()=>o("button",{class:"btn btn-info",type:"button","data-bs-toggle":"offcanvas","data-bs-target":"#aboutOffcanvas","aria-controls":"aboutOffcanvas",title:"À propos"},[o("i",{class:"bi bi-question-circle"})],-1)),ot={class:"col-md-9 d-flex justify-content-center"},at={class:"text-center"},rt={class:"col-md-4 simulation-area hospital-area"},lt={class:"hospital-layout"},dt=c(()=>o("h5",null,"Salle du personnel",-1)),ut=["onDragstart","onDragend"],mt={class:"emergency-rooms-grid"},ct=["onDrop"],ht={class:"er-occupants"},ft=["onDragstart","onDragend","onMouseenter","onMouseleave"],gt=["onDragstart","onDragend"],pt=c(()=>o("h5",null,"Salle d'attente",-1)),vt=["onDragstart","onDragend","onMouseenter","onMouseleave"],bt=c(()=>o("div",{class:"row mt-2 mb-3 p-0 bg-dark"},[o("div",{class:"col-md-12 mt-1 d-flex justify-content-center"},[o("h4",null,"Urgence")])],-1)),yt={class:"offcanvas offcanvas-end",style:{width:"400px"},tabindex:"-1",id:"settingsOffcanvas","data-bs-backdrop":"static","aria-labelledby":"settingsOffcanvasLabel"},Tt=c(()=>o("div",{class:"offcanvas-header"},[o("h5",{class:"offcanvas-title",id:"settingsOffcanvasLabel",style:{color:"black"}},"Paramètres"),o("button",{type:"button",class:"btn-close text-reset","data-bs-dismiss":"offcanvas","aria-label":"Close",style:{"background-color":"darkgray"}})],-1)),St={class:"offcanvas-body"},_t={class:"mb-3"},kt=c(()=>o("label",{for:"population",class:"form-label"},"Population initiale",-1)),Dt={class:"mb-3"},Rt=c(()=>o("label",{for:"population",class:"form-label"},"Vitesse de déplacement",-1)),xt={class:"mb-3"},It=c(()=>o("label",{for:"meanTimeInfection",class:"form-label",title:"Une infection spontannée pourrait représenter une personne infectée venue de l'étranger"},"Temps moyen avant infection spontanée (s)",-1)),Mt={class:"mb-3"},wt=c(()=>o("label",{for:"infectionRate",class:"form-label",title:"Probabilité qu'un individu soit infecté si elle entre en contact avec un individu infecté"},"Taux d'infection par contact (%)",-1)),Pt={class:"mb-3"},Et=c(()=>o("label",{for:"severeInfectionRate",class:"form-label",title:"Probabilité qu'un individu infecté décède si il n'est pas traité par un médecin à l'urgence"},"Taux de mortalité si non traité (%)",-1)),Ht={class:"mb-3"},Ct=c(()=>o("label",{for:"progressionTime",class:"form-label",title:"Temps moyen de progression ou de rémission naturelle de la maladie"},"Temps moyen de progression/rémission (s)",-1)),qt={class:"mb-3"},zt=c(()=>o("label",{for:"treatmentTime",class:"form-label",title:"Temps moyen de traitement de la maladie à l'urgence"},"Temps moyen de traitement à l'urgence (s)",-1)),Ft={class:"mb-3"},At=c(()=>o("label",{for:"numDoctors",class:"form-label"},"Nombre de médecins",-1)),Ut=U('<div class="offcanvas offcanvas-end" style="width:700px;" tabindex="-1" id="aboutOffcanvas" data-bs-backdrop="static" aria-labelledby="aboutOffcanvasLabel" data-v-f0d17f92><div class="offcanvas-header" data-v-f0d17f92><h5 class="offcanvas-title" id="aboutOffcanvasLabel" style="color:black;" data-v-f0d17f92>À propos</h5><button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close" style="background-color:darkgray;" data-v-f0d17f92></button></div><div class="offcanvas-body" data-v-f0d17f92><div class="mb-3" data-v-f0d17f92><p data-v-f0d17f92>Cette application simule (très hypothétiquement) l&#39;infection d&#39;une population d&#39;individus ainsi que la prise en charge à l&#39;urgence des individus infectés.</p><p data-v-f0d17f92>Une infection spontannée, réprésentant par exemple une personne infectée venue de l&#39;étranger, peut survenir à n&#39;importe quel moment avec un temps moyen (distribution exponentielle) spécifié dans les paramètres. À chaque contact entre un individu infecté et un individu sain, il y a un risque d&#39;infection selon une probabilité spécifiée dans les paramètres. Lors d&#39;une infection, celle-ci entraînera la mort de l&#39;individu, s&#39;il n&#39;est pas traité, selon une probabilité également spécifiée dans les paramètres.</p><p data-v-f0d17f92>La santé de l&#39;individu infecté diminue jusqu&#39;à 0 % si l&#39;infection est mortelle ou entre 0 et 100 % (distribution uniforme) autrement. Une fois que la santé de l&#39;individu atteint ce seuil, à moins que ce dernier soit nul, elle remontera jusqu&#39;à 100 %. Le temps moyen de progression/rémission (distribution exponentielle) est spécifié dans les paramètres. À noter que ces deux temps sont différents pour un même individu. Si un individu meurt, il sera simplement éliminé de la simulation.</p><p data-v-f0d17f92>En diminuant, si la santé de l&#39;individu atteint un seuil de tolérance entre 25 et 100 % (distribution uniforme), celui-ci se rendra à l&#39;urgence. Ce paramètre simule en fait le degré de tolérance d&#39;un individu avant qu&#39;il décide de se rendre à l&#39;urgence.</p><p data-v-f0d17f92>Si une salle de traitement est disponible à l&#39;urgence, l&#39;individu sera automatiquement assigné à celle-ci. Si un médecin est disponible, il sera également assigné à cette salle. Si les salles sont pleines, l&#39;individu attendra en salle d&#39;attente.</p><p data-v-f0d17f92>Les individus sont placés en ordre de priorité dans la salle d&#39;attente. Cependant, un médecin ne changera pas de salle tant que le traitement d&#39;un individu ne sera pas terminé selon le temps de traitement moyen spécifié (distribution exponentielle). Tous les traitements rétablissent la santé des individus. Une individu dont l&#39;infection est mortelle, s&#39;il est traité à temps sera nécessairement guéri.</p><p data-v-f0d17f92>Il est possible qu&#39;un individu guérisse par lui même pendant qu&#39;il est à l&#39;urgence. Un individu guéri retournera automatiquement dans la population.</p><p data-v-f0d17f92>La population de départ, le nombre de médecins disponibles ainsi que la vitesse de déplacement des individus peuvent être modifiés dans les paramètres.</p><p data-v-f0d17f92>Il est également possible de déplacer manuellement les individus ainsi que les médecins dans l&#39;urgence pour tenter de prioriser les traitements.</p><p data-v-f0d17f92>Cette application a été réalisée grâce à l&#39;<b data-v-f0d17f92>intelligence artificielle</b> (à environ 90 %) à partir d&#39;une requête détaillée à <a href="https://deepmind.google/technologies/gemini/" target="_blank" data-v-f0d17f92>Gemini 2.5 Pro</a> de Google.</p></div><button class="btn btn-primary w-100 mt-3" style="font-size:20px;" data-bs-dismiss="offcanvas" aria-label="Close" data-v-f0d17f92>Ok</button></div></div>',1);function Ot(e,n,m,u,a,t){const i=D("Navbar"),l=D("Footer"),r=D("cookieBanner");return f(),g("div",N,[R(i),o("div",j,[W,o("div",G,[o("div",{class:"col-md-8 p-0 simulation-area nature-area",ref:"natureArea",onDragover:n[2]||(n[2]=k(()=>{},["prevent"])),onDrop:n[3]||(n[3]=s=>t.handleDrop(s,"nature"))},[o("div",X,[(f(!0),g(b,null,y(a.patients.filter(s=>s.state==="nature"),s=>(f(),g("div",{key:"nature-p-"+s.id,class:S(["entity patient patient-nature",{"is-sick":s.group==="sick","is-dragging":s.isDragging}]),style:_({left:s.x+"px",top:s.y+"px",backgroundColor:s.color,pointerEvents:a.isRunning?"auto":"none"}),draggable:"true",onMouseenter:d=>s.showTooltip=!0,onMouseleave:d=>s.showTooltip=!1},[p(o("div",{class:"patient-tooltip"}," Santé: "+T((s.health*100).toFixed(0))+" % ",513),[[x,s.showTooltip]])],46,Y))),128))],512),o("div",J,[o("div",K,[o("div",Q,[o("button",{class:"btn btn-success me-2",onClick:n[0]||(n[0]=(...s)=>t.startSimulation&&t.startSimulation(...s)),disabled:a.isRunning,title:"Démarrer la simulation"},tt,8,Z),o("button",{class:"btn btn-secondary me-2",onClick:n[1]||(n[1]=(...s)=>t.resetSimulation&&t.resetSimulation(...s)),title:"Réinitialiser la simulation"},st),nt,it]),o("div",ot,[o("h4",at,"Population : "+T(t.currentPopulation)+"  -  Décès : "+T(a.deadPatients.length),1)])])])],544),o("div",rt,[o("div",lt,[o("div",{class:"room staff-room p-2",onDragover:n[4]||(n[4]=k(()=>{},["prevent"])),onDrop:n[5]||(n[5]=s=>t.handleDrop(s,"staff"))},[dt,(f(!0),g(b,null,y(a.doctors.filter(s=>s.state==="staffRoom"),s=>(f(),g("div",{key:"s-"+s.id,class:S(["entity doctor doctor-staff",{"is-dragging":s.isDragging}]),style:_({pointerEvents:a.isRunning?"auto":"none"}),draggable:"true",onDragstart:d=>t.handleDragStart(d,s.id,"doctor"),onDragend:d=>t.handleDragEnd(d,s.id,"doctor")},null,46,ut))),128))],32),o("div",mt,[(f(),g(b,null,y(10,s=>o("div",{key:"er-"+s,class:"room emergency-room p-1",onDragover:n[6]||(n[6]=k(()=>{},["prevent"])),onDrop:d=>t.handleDrop(d,"er",s)},[o("h6",null,"Salle "+T(s),1),o("div",ht,[(f(!0),g(b,null,y(a.patients.filter(d=>d.state==="er"&&d.erRoom===s),d=>(f(),g("div",{key:"er-p-"+d.id,class:S(["entity patient patient-er",{"is-sick":d.group==="sick","is-dragging":d.isDragging}]),style:_({backgroundColor:d.color,pointerEvents:a.isRunning?"auto":"none"}),draggable:"true",onDragstart:h=>t.handleDragStart(h,d.id,"patient"),onDragend:h=>t.handleDragEnd(h,d.id,"patient"),onMouseenter:h=>d.showTooltip=!0,onMouseleave:h=>d.showTooltip=!1},[p(o("div",{class:"patient-tooltip"}," Santé: "+T((d.health*100).toFixed(0))+" % ",513),[[x,d.showTooltip]])],46,ft))),128)),(f(!0),g(b,null,y(a.doctors.filter(d=>d.state==="er"&&d.erRoom===s),d=>(f(),g("div",{key:"er-d-"+d.id,class:S(["entity doctor doctor-er",{"is-dragging":d.isDragging}]),style:_({pointerEvents:a.isRunning?"auto":"none"}),draggable:"true",onDragstart:h=>t.handleDragStart(h,d.id,"doctor"),onDragend:h=>t.handleDragEnd(h,d.id,"doctor")},null,46,gt))),128))])],40,ct)),64))]),o("div",{class:"room waiting-room p-2",onDragover:n[7]||(n[7]=k(()=>{},["prevent"])),onDrop:n[8]||(n[8]=s=>t.handleDrop(s,"waiting"))},[pt,(f(!0),g(b,null,y(a.patients.filter(s=>s.state==="waiting").sort((s,d)=>s.health-d.health),s=>(f(),g("div",{key:"w-"+s.id,class:S(["entity patient patient-waiting",{"is-sick":s.group==="sick","is-dragging":s.isDragging}]),style:_({backgroundColor:s.color,pointerEvents:a.isRunning?"auto":"none"}),draggable:"true",onDragstart:d=>t.handleDragStart(d,s.id,"patient"),onDragend:d=>t.handleDragEnd(d,s.id,"patient"),onMouseenter:d=>s.showTooltip=!0,onMouseleave:d=>s.showTooltip=!1},[p(o("div",{class:"patient-tooltip"}," Santé: "+T((s.health*100).toFixed(0))+" % ",513),[[x,s.showTooltip]])],46,vt))),128))],32)]),bt])]),o("div",yt,[Tt,o("div",St,[o("div",_t,[kt,p(o("input",{type:"number",class:"form-control",id:"population","onUpdate:modelValue":n[9]||(n[9]=s=>a.settings.population=s),min:"10",max:"200",step:"10"},null,512),[[v,a.settings.population,void 0,{number:!0}]])]),o("div",Dt,[Rt,p(o("input",{type:"number",class:"form-control",id:"population","onUpdate:modelValue":n[10]||(n[10]=s=>a.settings.entitySpeed=s),min:"10",max:"200",step:"50"},null,512),[[v,a.settings.entitySpeed,void 0,{number:!0}]])]),o("div",xt,[It,p(o("input",{type:"number",class:"form-control",id:"meanTimeInfection","onUpdate:modelValue":n[11]||(n[11]=s=>a.settings.meanTimeInfection=s),min:"1",step:"1"},null,512),[[v,a.settings.meanTimeInfection,void 0,{number:!0}]])]),o("div",Mt,[wt,p(o("input",{type:"number",class:"form-control",id:"infectionRate","onUpdate:modelValue":n[12]||(n[12]=s=>a.settings.infectionRate=s),min:"0",max:"100",step:"1"},null,512),[[v,a.settings.infectionRate,void 0,{number:!0}]])]),o("div",Pt,[Et,p(o("input",{type:"number",class:"form-control",id:"severeInfectionRate","onUpdate:modelValue":n[13]||(n[13]=s=>a.settings.severeInfectionRate=s),min:"0",max:"100",step:"1"},null,512),[[v,a.settings.severeInfectionRate,void 0,{number:!0}]])]),o("div",Ht,[Ct,p(o("input",{type:"number",class:"form-control",id:"progressionTime","onUpdate:modelValue":n[14]||(n[14]=s=>a.settings.progressionTime=s),min:"1",step:"1"},null,512),[[v,a.settings.progressionTime,void 0,{number:!0}]])]),o("div",qt,[zt,p(o("input",{type:"number",class:"form-control",id:"treatmentTime","onUpdate:modelValue":n[15]||(n[15]=s=>a.settings.treatmentTime=s),min:"1",step:"1"},null,512),[[v,a.settings.treatmentTime,void 0,{number:!0}]])]),o("div",Ft,[At,p(o("input",{type:"number",class:"form-control",id:"numDoctors","onUpdate:modelValue":n[16]||(n[16]=s=>a.settings.numDoctors=s),min:"1",max:"10"},null,512),[[v,a.settings.numDoctors,void 0,{number:!0}]])]),o("button",{class:"btn btn-primary w-100 mt-3",style:{"font-size":"20px"},onClick:n[17]||(n[17]=(...s)=>t.applySettingsAndRestart&&t.applySettingsAndRestart(...s)),"data-bs-dismiss":"offcanvas","aria-label":"Close"},"Ok")])]),Ut]),R(l),R(r)])}const Bt=C(I,[["render",Ot],["__scopeId","data-v-f0d17f92"]]);V(Bt).mount("#app");
